{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class IdentityService {\n  constructor(http) {\n    this.http = http;\n  }\n  ngOnDestroy() {\n    if (this.identityApiService) {\n      this.identityApiService.unsubscribe();\n    }\n  }\n  downloadClaims(callback = undefined) {\n    if (this.identityApiService) {\n      this.identityApiService.unsubscribe();\n    }\n    this.identityApiService = this.http.get('/Account/GetIdentity').subscribe({\n      next: identity => {\n        localStorage.setItem('Identity', identity?.claims?.email ?? '');\n        if (callback) {\n          callback();\n        }\n      }\n    });\n  }\n  getIdentity(callbacks) {\n    const identity = localStorage.getItem('Identity');\n    if ((!identity || identity.trim() === '') && callbacks?.err) {\n      callbacks.err();\n    } else if (callbacks?.next) {\n      callbacks.next(identity);\n    }\n  }\n  removeIdentity() {\n    if (localStorage.getItem('Identity')) {\n      localStorage.removeItem('Identity');\n    }\n  }\n}\nIdentityService.ɵfac = function IdentityService_Factory(t) {\n  return new (t || IdentityService)(i0.ɵɵinject(i1.HttpClient));\n};\nIdentityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: IdentityService,\n  factory: IdentityService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAExCC,WAAW;IACT,IAAI,IAAI,CAACC,kBAAkB,EAAE;MAC3B,IAAI,CAACA,kBAAkB,CAACC,WAAW,EAAE;;EAEzC;EAEAC,cAAc,CAACC,WAAiCC,SAAS;IACvD,IAAI,IAAI,CAACJ,kBAAkB,EAAE;MAC3B,IAAI,CAACA,kBAAkB,CAACC,WAAW,EAAE;;IAGvC,IAAI,CAACD,kBAAkB,GAAG,IAAI,CAACF,IAAI,CAACO,GAAG,CAA0B,sBAAsB,CAAC,CACrFC,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAiC,IAAI;QAC1CC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,QAAQ,EAAEG,MAAM,EAAEC,KAAK,IAAI,EAAE,CAAC;QAE/D,IAAIT,QAAQ,EAAE;UACZA,QAAQ,EAAE;;MAEd;KACD,CAAC;EACN;EAEAU,WAAW,CAACC,SAAiD;IAC3D,MAAMN,QAAQ,GAAGC,YAAY,CAACM,OAAO,CAAC,UAAU,CAAC;IAEjD,IAAI,CAAC,CAACP,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,EAAE,KAAK,EAAE,KAAKF,SAAS,EAAEG,GAAG,EAAE;MAC3DH,SAAS,CAACG,GAAG,EAAE;KAChB,MAAM,IAAIH,SAAS,EAAEP,IAAI,EAAE;MAC1BO,SAAS,CAACP,IAAI,CAACC,QAAQ,CAAC;;EAE5B;EAEAU,cAAc;IACZ,IAAIT,YAAY,CAACM,OAAO,CAAC,UAAU,CAAC,EAAE;MACpCN,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;;EAEvC;;AA3CWvB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAwB,SAAfxB,eAAe;EAAAyB,YAFd;AAAM","names":["IdentityService","constructor","http","ngOnDestroy","identityApiService","unsubscribe","downloadClaims","callback","undefined","get","subscribe","next","identity","localStorage","setItem","claims","email","getIdentity","callbacks","getItem","trim","err","removeIdentity","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\amaury\\Desktop\\Amaury\\VT\\Angular\\AngularProjects\\ProjectAngularWithDotNet\\ClientApp\\src\\app\\services\\identity.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from \"@angular/core\";\nimport { HttpClient } from '@angular/common/http';\nimport { Subscription } from \"rxjs\";\nimport { IdentityRetrievalResult } from \"../models/identityretrievalresult\";\nimport { IdentityRetrievalCallbacks } from \"../models/identityretrievalcallbacks\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IdentityService implements OnDestroy {\n\n  identityApiService: Subscription | undefined;\n\n  constructor(private http: HttpClient) { }\n  \n  ngOnDestroy(): void {\n    if (this.identityApiService) {\n      this.identityApiService.unsubscribe();\n    }\n  }\n\n  downloadClaims(callback: Function | undefined = undefined): void {\n    if (this.identityApiService) {\n      this.identityApiService.unsubscribe();\n    }\n    \n    this.identityApiService = this.http.get<IdentityRetrievalResult>('/Account/GetIdentity')\n      .subscribe({\n        next: (identity: IdentityRetrievalResult) => {\n          localStorage.setItem('Identity', identity?.claims?.email ?? '');\n\n          if (callback) {\n            callback();\n          }\n        }\n      });\n  }\n\n  getIdentity(callbacks: IdentityRetrievalCallbacks | undefined) {\n    const identity = localStorage.getItem('Identity');\n\n    if ((!identity || identity.trim() === '') && callbacks?.err) {\n      callbacks.err();\n    } else if (callbacks?.next) {\n      callbacks.next(identity);\n    }\n  }\n\n  removeIdentity(): void {\n    if (localStorage.getItem('Identity')) {\n      localStorage.removeItem('Identity');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}