{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nexport class GoogleAuthInterceptor {\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error instanceof HttpErrorResponse && error.status === 0) {\n        window.location.href = '/Account/Login';\n      }\n      throw new Error(error?.message ?? 'Unknown error');\n    }));\n  }\n}\nGoogleAuthInterceptor.ɵfac = function GoogleAuthInterceptor_Factory(t) {\n  return new (t || GoogleAuthInterceptor)();\n};\nGoogleAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GoogleAuthInterceptor,\n  factory: GoogleAuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAA6EA,iBAAiB,QAAQ,sBAAsB;AAG5H,SAAcC,UAAU,QAAQ,gBAAgB;;AAGhD,OAAM,MAAOC,qBAAqB;EAEhCC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CACxBG,IAAI,CACHN,UAAU,CAAEO,KAAU,IAAI;MAExB,IAAIA,KAAK,YAAYR,iBAAiB,IAAIQ,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;QAC5DC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,gBAAgB;;MAGzC,MAAM,IAAIC,KAAK,CAACL,KAAK,EAAEM,OAAO,IAAI,eAAe,CAAC;IACpD,CAAC,CAAC,CACH;EACL;;AAdWZ,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAa,SAArBb,qBAAqB;AAAA","names":["HttpErrorResponse","catchError","GoogleAuthInterceptor","intercept","request","next","handle","pipe","error","status","window","location","href","Error","message","factory"],"sourceRoot":"","sources":["C:\\Users\\amaury\\Desktop\\Amaury\\VT\\Angular\\AngularProjects\\ProjectAngularWithDotNet\\ClientApp\\src\\app\\http-interceptors\\google-auth-interceptor.ts"],"sourcesContent":["import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from \"@angular/core\"\nimport { Observable, of } from \"rxjs\";\nimport { tap, catchError } from \"rxjs/operators\";\n\n@Injectable()\nexport class GoogleAuthInterceptor implements HttpInterceptor {\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request)\n      .pipe(\n        catchError((error: any) => {\n          \n          if (error instanceof HttpErrorResponse && error.status === 0) {\n            window.location.href = '/Account/Login';\n          }\n\n          throw new Error(error?.message ?? 'Unknown error');\n        })\n      )\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}